# Create customer index
PUT http://localhost:9200/customers

###

# Create product index
PUT http://localhost:9200/products

###

# Create order index
PUT http://localhost:9200/orders

###

# Show all indices
GET http://localhost:9200/_cat/indices?v

###

# Delete index
DELETE http://localhost:9200/customers

###

# Dynamic mapping: auto define structure in first insert
# Mapping date format
# Get mapping index, show structure and rules
GET http://localhost:9200/orders/_mapping

###

# Mapping date format
PUT http://localhost:9200/customers/_mapping
Content-Type: application/json

{
    "date_detection": true,
    "dynamic_date_formats": [
        "yyyy-MM-dd HH:mm:ss",
        "yyyy-MM-dd",
        "yyyy/MM/dd HH:mm:ss",
        "yyyy/MM/dd"
    ]
}

###

# Mapping number format
PUT http://localhost:9200/customers/_mapping
Content-Type: application/json

{
    "numeric_detection": true
}

###

# Insert / create data
POST http://localhost:9200/customers/_create/1
Content-Type: application/json

{
    "name": "Angga Ari",
    "email": "angga@mail.com",
    "registered_at": "2023-10-10",
    "is_active": true
}

###

POST http://localhost:9200/products/_create/1
Content-Type: application/json

{
    "product_name": "Macbook Air M2 16GB 256GB",
    "variant": "midnight",
    "price": "22500000"
}

###

POST http://localhost:9200/products/_create/2
Content-Type: application/json

{
    "product_name": "Asus Zen book 1TB",
    "variant": "black",
    "price": 1245000
}

###

POST http://localhost:9200/orders/_create/1
Content-Type: application/json

{
    "order_date": "2023/10/12 12:30:12",
    "customer_id": "1",
    "total": "1540000",
    "items": [
        {
            "product_id": 1,
            "price": 1200000,
            "quantity": 2
        },
        {
            "product_id": 2,
            "price": 340000,
            "quantity": 5
        }
    ]
}

###

# Get data
GET http://localhost:9200/customers/_doc/1

###

# Not found
GET http://localhost:9200/customers/_doc/not-found

###

# Get source / original data without metadata and no _id
GET http://localhost:9200/customers/_source/1

###

# Check data if exists of not
HEAD http://localhost:9200/customers/_doc/1

###

# Multiget
POST http://localhost:9200/products/_mget
Content-Type: application/json

{
    "ids": ["1", "2"]
}

###

# Multiget cross index
POST http://localhost:9200/_mget
Content-Type: application/json

{
    "docs": [
        {
            "_id": 1,
            "_index": "orders"
        },
        {
            "_id": 1,
            "_index": "customers"
        }
    ]
}

###

# Search
POST http://localhost:9200/products/_search

###

# Pagination
POST http://localhost:9200/products/_search?size=10&from=0

###

# Sort, for keyword sorting will be order lexicographically
# eg: 1000 in front 999, should change to 0999 then 1000 (or using type number for simpliciy)
POST http://localhost:9200/products/_search?sort=price:asc

###

# Index API for create or update
POST http://localhost:9200/products/_doc/3
Content-Type: application/json

{
    "name": "Mie Goreng",
    "variant": "Goreng",
    "price": 230000
}

###

# Update API to update some field
POST http://localhost:9200/products/_update/3
Content-Type: application/json

{
    "doc": {
        "price": 30000
    }
}

###

# Delete API
DELETE http://localhost:9200/products/_doc/4

###

# Bulk API
POST http://localhost:9200/_bulk
Content-Type: application/json

< bulk.json
#{"create": {"_index": "customers", "_id": "5"}}
#{"name": "Angga Junior", "register_at": "2023-01-01 12:34:23"}
#{"index": {"_index": "customers", "_id": "6"}}
#{"name": "Evander Alastair", "register_at": "2023-01-02 03:22:00"}
#{"update": {"_index": "customers", "_id": "6"}}
#{"doc": {"name": "Keenan Alastair"}}
#{"delete": {"_index": "customers", "id": 5}}

###

# Alias API
POST http://localhost:9200/_aliases
Content-Type: application/json

{
    "actions": [
        {
            "add": {
                "alias": "customer",
                "index": "customers"
            }
        },
        {
            "add": {
                "alias": "order",
                "index": "orders"
            }
        }
    ]
}

###

# Find out alias
GET http://localhost:9200/_aliases

###

# Delete alias
POST http://localhost:9200/_aliases
Content-Type: application/json

{
    "actions": [
        {
            "remove": {
                "alias": "customer",
                "index": "customers"
            }
        }
    ]
}

###

# Search by alias
GET http://localhost:9200/order/_search

###

# Reindex
# Create new index
PUT http://localhost:9200/orders_v2

###

PUT http://localhost:9200/orders_v2/_mapping
Content-Type: application/json

{
    "numeric_detection": true,
    "date_detection": true,
    "dynamic_date_formats": [
        "yyyy-MM-dd HH:mm:ss",
        "yyyy-MM-dd",
        "yyyy/MM/dd HH:mm:ss",
        "yyyy/MM/dd"
    ]
}

###

# Using reindex from orders to orders_v2
POST http://localhost:9200/_reindex
Content-Type: application/json

{
    "source": {
        "index": "orders"
    },
    "dest": {
        "index": "orders_v2"
    }
}

###

# Check the result
GET http://localhost:9200/orders_v2/_search

###

# Update alias order
POST http://localhost:9200/_aliases
Content-Type: application/json

{
    "actions": [
        {
            "add": {
                "alias": "order",
                "index": "orders_v2"
            }
        },
        {
            "remove": {
                "alias": "order",
                "index": "orders"
            }
        }
    ]
}

###

# Search with alias
GET http://localhost:9200/order/_search

###

# Include & exclude field
GET http://localhost:9200/order/_search?_source_includes=customer_id,order_date,total

###

GET http://localhost:9200/order/_source/1?_source_excludes=price,items

###

# Manual mapping
# Create new index
PUT http://localhost:9200/customers_v2

###

PUT http://localhost:9200/customers_v2/_mapping
Content-Type: application/json

{
    "numeric_detection": true,
    "date_detection": true,
    "dynamic_date_formats": [
        "yyyy-MM-dd HH:mm:ss",
        "yyyy-MM-dd",
        "yyyy/MM/dd HH:mm:ss",
        "yyyy/MM/dd"
    ],
    "properties": {
        "username": {
            "type": "keyword"
        },
        "first_name": {
            "type": "text"
        },
        "last_name": {
            "type": "text"
        },
        "email": {
            "type": "keyword"
        },
        "gender": {
            "type": "keyword"
        },
        "birth_date": {
            "type": "date",
            "format": "yyyy-MM-dd"
        }
    }
}

###

# Add alias for customer_V2
POST http://localhost:9200/_aliases
Content-Type: application/json

{
    "actions": [
        {
            "add": {
                "alias": "customer",
                "index": "customers_v2"
            }
        }
    ]
}

###

# Insert customer data
POST http://localhost:9200/_bulk
Content-Type: application/json

< customers.json

###

# Check customer data
POST http://localhost:9200/customer/_search

###

# Object field
# Update mapping
PUT http://localhost:9200/customers_v2/_mapping
Content-Type: application/json

{
    "properties": {
        "address": {
            "properties": {
                "street": {
                    "type": "text"
                },
                "city": {
                    "type": "text"
                },
                "province": {
                    "type": "text"
                },
                "country": {
                    "type": "text"
                },
                "zip_code": {
                    "type": "keyword"
                }
            }
        }
    }
}

###

# Update customer data with address
POST http://localhost:9200/_bulk
Content-Type: application/json

< customers-with-address.json

###

# Array of Object
# Update mapping array
PUT http://localhost:9200/customers_v2/_mapping
Content-Type: application/json

{
    "properties": {
        "hobbies": {
            "type": "text"
        },
        "banks": {
            "properties": {
                "name": {
                    "type": "text"
                },
                "account_number": {
                    "type": "keyword"
                }
            }
        }
    }
}

###

# Update customer data with hobby and bank
POST http://localhost:9200/_bulk
Content-Type: application/json

< customers-with-hobby-and-bank.json

###

# Query
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "match_all": {}
    }
}

###

# Search using match_all
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "match_all": {}
    },
    "size": 20,
    "from": 0,
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

###

# Term query (type keyword exact search, case sensitive)
# cannot use in "text" data type
# do not apply Standard Analyzer, so the value must exact match
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "term": {
            "gender": "Female"
        }
    },
    "size": 20,
    "from": 0,
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

###

# Match query (type text, using text analysis, auto lower case)
# convert string "angga@mail.com" = ["angga", "mail", "com"]
# "bca digial" = ["bca", "digital"]
# cannot search with angga@mail.com but "angga", "mail" or "com"
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "banks.name": "bca"
        }
    },
    "size": 20,
    "from": 0,
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

###

# by default operator match using "OR"
# if we want to match all string "bca digital", using "AND"
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "banks.name": {
                "query": "bca digital",
                "operator": "AND"
            }
        }
    },
    "size": 20,
    "from": 0,
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

###

# Terms query similar "like" in SQL
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "terms": {
            "username": [
                "Username1", // not found, because type keyword should match (case sensitive)
                "username2",
                "username3"
            ]
        }
    }
}

###

# Boolean query
# search in multiple fields: must, filter, must_not, should

# must query: where hobbies = 'gaming' AND banks.name LIKE '%bca%'
# calculate relevancies / score
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {
                        "hobbies": "gaming" // should lowercase because text document converted to lucine doc
                    }
                },
                {
                    "term": {
                        "banks.name": "bca"
                    }
                }/*,
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "AND"
                        }
                    }
                }*/ // if should match bca digital
            ]
        }
    }
}

###

# must query: not calculate score / relevancies, manual sort,
# where hobbies = 'gaming' AND banks.name = 'bca digital'
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "filter": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "AND"
                        }
                    }
                }
            ]
        }
    },
    "sort": [
        {
            "username": {
                "order": "desc"
            }
        }
    ]
}

###

# must not query: where hobbies != 'gaming' AND banks.name != 'bca digital;
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must_not": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                },
                {
                    "match": {
                        "banks.name": {
                            "query": "bca digital",
                            "operator": "AND"
                        }
                    }
                }
            ]
        }
    }
}

###

# should query: WHERE banks.name = 'bca' OR banks.name = 'bni'
# contains score / relevancy
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            //"must": [],
            //"filter": [],
            //"must_not": [],
            "should": [
                {
                    "term": {
                        "banks.name": "bca"
                    }
                },
                {
                    "term": {
                        "banks.name": "bni"
                    }
                }
            ]
        }
    }
}

# minimum_should_match by default has value 1 (one of condition should match / or operator) 
# by default if we add must and should, the should is not required to match at least one condition (ignored / minimum_should_match set to 0)
# if we want to keep condition "must" + "should" (at least one match), set minimum_should_match back to 1

###

POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                }
            ],
            "should": [
                {
                    "term": {
                        "banks.name": "bca"
                    }
                },
                {
                    "term": {
                        "banks.name": "bni"
                    }
                }
            ],
            "minimum_should_match": 1, // can be increased to 2, 3 (total should match)
        }
    }
}

###

# Explain API
POST http://localhost:9200/customer/_explain/username126
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {
                        "hobbies": "gaming"
                    }
                }
            ],
            "should": [
                {
                    "term": {
                        "banks.name": "bca"
                    }
                },
                {
                    "term": {
                        "banks.name": "bni"
                    }
                }
            ],
            "minimum_should_match": 1
        }
    }
}

###

# Boost score, to manipulate scoring
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "should": [
                {
                    "term": {
                        "banks.name": {
                            "value": "bca",
                            "boost": 0, // last priority
                        }
                    }
                },
                {
                    "term": {
                        "banks.name": {
                            "value": "bni",
                            "boost": 2 // increase score to multiply
                        }
                    }
                }
            ]
        }
    }
}

###

# Flattened type, merge all field value and stored as key
# can be anything input to the field
PUT http://localhost:9200/customer/_mapping
Content-Type: application/json

{
    "properties": {
        "labels": {
            "type": "flattened"
        }
    }
}

###

GET http://localhost:9200/customer/_mapping

###

POST http://localhost:9200/customer/_update/username1
Content-Type: application/json

{
    "doc": {
        "labels": { // can be anything inside labels fields
            "priority": "vip",
            "discount": "10% discount",
            "complaint": "Always complaint"
        }
    }
}

# labels : ['vip', '10', discount', 'Always' 'complaint']
# stored as keyword, not turn into lowercase

###

GET http://localhost:9200/customer/_doc/username1

###

POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "term": {
            "labels": "vip"
        }
    }
}

###

# search vip and regular customer (nested object search)
POST http://localhost:9200/customer/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "should": [
                {
                    "term": {
                        "labels.priority": "vip"
                    }
                },
                {
                    "term": {
                        "labels.priority": "regular"
                    }
                }
            ]
        }
    }
}

###

# search vip and regular customer (nested object search)
PUT http://localhost:9200/parents

###

# Nested field, special data type to store object in array independently (not flattened regular lucine doc)
# elasticsearch create hidden field, expensive process, only use if necessary,
# create alternative structure data to prevent of using "nested type" 

PUT http://localhost:9200/parents/_mapping
Content-Type: application/json

{
    "properties": {
        "first_name": {
            "type": "text"
        },
        "last_name": {
            "type": "text"
        },
        "children": {
            "properties": {
                "first_name": {
                    "type": "text"
                },
                "last_name": {
                    "type": "text"
                },
                "full_name": { // alternative to query first name and last name, prevent using "nested type"
                    "type": "text"
                }
            }
        }
    }
}

###

GET http://localhost:9200/parents/_mapping

###

POST http://localhost:9200/parents/_doc/1
Content-Type: application/json

{
    "first_name": "angga",
    "last_name": "ari",
    "children": [
        {
            "first_name": "keenan",
            "last_name": "evander"
        },
        {
            "first_name": "diana",
            "last_name": "eka"
        }
    ]
}

###

# search children first name "keenan" and last name "eka"
# shouln't found, but because lucine document is flattened value, it's found
POST http://localhost:9200/parents/_search
Content-Type: application/json

{
    "query": {
        "bool": {
            "must": [
                {
                    "match": {
                        "children.first_name": "keenan"
                    }
                },
                {
                    "match": {
                        "children.last_name": "eka"
                    }
                }
            ]
        }
    }
}

###

# recreate mapping to use type "nested"

DELETE http://localhost:9200/parents

###

PUT http://localhost:9200/parents

###


PUT http://localhost:9200/parents/_mapping
Content-Type: application/json

{
    "properties": {
        "first_name": {
            "type": "text"
        },
        "last_name": {
            "type": "text"
        },
        "children": {
            "type": "nested",
            "properties": {
                "first_name": {
                    "type": "text"
                },
                "last_name": {
                    "type": "text"
                }
            }
        }
    }
}

# try to insert doc above and query with nested query
# type data nested cannot query with normal query above, using special query

###

POST http://localhost:9200/parents/_search
Content-Type: application/json

{
    "query": {
        "nested": {
            "path": "children",
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "children.first_name": "keenan"
                            }
                        },
                        {
                            "match": {
                                "children.last_name": "eka"
                            }
                        }
                    ]
                }
            }
        }
    }
}

###

# Multi fields
# create some fields from one field
# eg: create a field "name" and use multi field with different type
# name as "text" and name as "keyword" (because "text" cannot be sorted, rather than create 2 field and maintain the value)

PUT http://localhost:9200/categories

###

PUT http://localhost:9200/categories/_mapping
Content-Type: application/json

{
    "properties": {
        "name": {
            "type": "text",
            "fields": {
                "raw": {
                    "type": "keyword"
                },
                "xxx": {
                    "type": "text"
                }
            }
        }
    }
}

###

GET http://localhost:9200/categories/_mapping

###

POST http://localhost:9200/categories/_doc/1
Content-Type: application/json

{
    "name": "Macbook Air M2"
}

###

POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "name": "macbook" // search part or string
        }
    },
    /*"sort": [
        {
            "name": {
                "order": "asc"
            }
        }
    ]*/ // text data type cannot be search,
    "sort": [
        {
            "name.raw": { // sort using other type
                "order": "asc"
            }
        }
    ]
}

###

POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "query": {
        "match": {
            "name.raw": "Macbook Air M2" // sort exact
        }
    },
    "sort": [
        {
            "name.raw": {
                "order": "asc"
            }
        }
    ]
}

###

# Update by query
# when we have existing data and add multi field (or in other case new field / mapping),
# old data not automatically insert alternative type
# without recreate new index

GET http://localhost:9200/products/_mapping

###

PUT http://localhost:9200/products/_mapping
Content-Type: application/json

{
    "properties": {
        "name": {
            "type": "text",
            "fields": {
                "raw": {
                    "type": "keyword"
                }
            }
        }
    }
}

###

# update all data by query to trigger multi field value
POST http://localhost:9200/products/_update_by_query
Content-Type: application/json

{
    "query": {
        "match_all": {
        }
    }
}

###

POST http://localhost:9200/products/_search
Content-Type: application/json

{
    "query": {
        "term": {
            "name.raw": "Mie Goreng"
        }
    }
}

###

# Delete by Query API
POST http://localhost:9200/categories/_doc/2
Content-Type: application/json

{
    "name": "invalid category 2"
}

###

POST http://localhost:9200/categories/_delete_by_query
Content-Type: application/json

{
    "query": {
        "match": {
            "name": "invalid"
        }
    }
}

###

# Search after (replacement of Scoll API)

POST http://localhost:9200/categories/_mapping
Content-Type: application/json

{
    "properties": {
        "id": {
            "type": "keyword"
        }
    }
}

###

POST http://localhost:9200/_bulk
Content-Type: application/json

< categories.json

###

POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "size": 100,
    "from": 10001, // error, by default max result 10k
    "query": {
        "match_all": {}
    }
}

###

POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "size": 100,
    "from": 0,
    "query": {
        "match_all": {}
    },
    "sort": [
        {
            "id": {
                "order": "asc"
            }
        }
    ]
} // result last value 10087

###
# Next query use 10087 as params after

POST http://localhost:9200/categories/_search
Content-Type: application/json

{
    "size": 100,
    "from": 0,
    "query": {
        "match_all": {}
    },
    "sort": [
        {
            "id": {
                "order": "asc"
            }
        }
    ],
    "search_after": [
        "10087"
    ]
}

### Cat API (Compact and aligned text), check data, stats, nodes
GET http://localhost:9200/_cat
Content-Type: application/json

###
GET http://localhost:9200/_cat/indices?v=true
Content-Type: application/json

###
GET http://localhost:9200/_cat/aliases?v=true
Content-Type: application/json

###
GET http://localhost:9200/_cat/nodes?v=true
Content-Type: application/json

### Snapshot (backup cluster)
# change elasticsearch.yml -> path.repo: backup-path
# Create snapshot repo
POST http://localhost:9200/_snapshot/first_backup
Content-Type: application/json

{
    "type": "fs",
    "settings": {
        "location": "first_backup" // backup-path/first_backup
    }
}

### Get all snaphot
GET http://localhost:9200/_snapshot

### Perform snapshot
PUT http://localhost:9200/_snapshot/first_backup/snapshot1
Content-Type: application/json

{
    "indices": [],
    "metadata": {
        "taken_by": "Angga",
        "desciption": "Backup daily",
        "other_info": "anything"
    }
}

### Get snaphot
GET http://localhost:9200/_snapshot/first_backup/snapshot1

### Get snaphot via CAT API
GET http://localhost:9200/_cat/snapshots?v=true

### Restore snapshot
# ---------------------------
# 1. Delete all categories
POST http://localhost:9200/categories/_delete_by_query
Content-Type: application/json

{
    "query": {
        "match_all": {}
    }
}

###
# 2. Check categories
POST http://localhost:9200/categories/_search

###
# 3. Close index before restore (prevent read/write)
POST http://localhost:9200/categories/_close

###
# 4. Restore categories
POST http://localhost:9200/_snapshot/first_backup/snapshot1/_restore
Content-Type: application/json

{
    "indices": [
        "categories"
    ]
}

###
# 5. Open index after restore
POST http://localhost:9200/categories/_open

### Delete snapshot
# ---------------------------
# 1.1 Delete snapshot in repo
DELETE http://localhost:9200/_snapshot/first_backup/snapshot1

###
# 1.2 Delete repo
DELETE http://localhost:9200/_snapshot/first_backup
